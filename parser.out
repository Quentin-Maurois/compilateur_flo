Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     expr -> FAUX
Rule 7     expr -> VRAI
Rule 8     expr -> NON expr  [precedence=right, level=2]
Rule 9     expr -> expr OU expr  [precedence=left, level=1]
Rule 10    expr -> expr ET expr  [precedence=left, level=1]
Rule 11    expr -> expr DIFFERENT expr  [precedence=left, level=3]
Rule 12    expr -> expr EGAL expr  [precedence=left, level=3]
Rule 13    expr -> expr SUPERIEUR_OU_EGAL expr  [precedence=left, level=3]
Rule 14    expr -> expr INFERIEUR_OU_EGAL expr  [precedence=left, level=3]
Rule 15    expr -> expr SUPERIEUR expr  [precedence=left, level=3]
Rule 16    expr -> expr INFERIEUR expr  [precedence=left, level=3]
Rule 17    expr -> ENTIER
Rule 18    expr -> ( expr )  [precedence=left, level=6]
Rule 19    expr -> expr % expr  [precedence=left, level=5]
Rule 20    expr -> expr / expr  [precedence=left, level=5]
Rule 21    expr -> expr * expr  [precedence=left, level=5]
Rule 22    expr -> expr - expr  [precedence=left, level=4]
Rule 23    expr -> expr + expr  [precedence=left, level=4]

Unused terminals:

    RETOURNER
    TANTQUE
    ==
    SI
    SINON
    TYPE_BOOLEEN
    LIRE
    >
    >=
    TYPE_ENTIER
    <
    IDENTIFIANT
    !=
    BOOLEEN
    <=

Terminals, with rules where they appear:

!=                   : 
%                    : 19
(                    : 5 18
)                    : 5 18
*                    : 21
+                    : 23
-                    : 22
/                    : 20
;                    : 5
<                    : 
<=                   : 
==                   : 
>                    : 
>=                   : 
BOOLEEN              : 
DIFFERENT            : 11
ECRIRE               : 5
EGAL                 : 12
ENTIER               : 17
ET                   : 10
FAUX                 : 6
IDENTIFIANT          : 
INFERIEUR            : 16
INFERIEUR_OU_EGAL    : 14
LIRE                 : 
NON                  : 8
OU                   : 9
RETOURNER            : 
SI                   : 
SINON                : 
SUPERIEUR            : 15
SUPERIEUR_OU_EGAL    : 13
TANTQUE              : 
TYPE_BOOLEEN         : 
TYPE_ENTIER          : 
VRAI                 : 7
error                : 

Nonterminals, with rules where they appear:

ecrire               : 4
expr                 : 5 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 18 19 19 20 20 21 21 22 22 23 23
instruction          : 2 3
listeInstructions    : 1 2
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 9

state 8

    (18) expr -> ( . expr )
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 14

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               shift and go to state 15
    OU              shift and go to state 16
    ET              shift and go to state 17
    DIFFERENT       shift and go to state 18
    EGAL            shift and go to state 19
    SUPERIEUR_OU_EGAL shift and go to state 20
    INFERIEUR_OU_EGAL shift and go to state 21
    SUPERIEUR       shift and go to state 22
    INFERIEUR       shift and go to state 23
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 10

    (6) expr -> FAUX .
    )               reduce using rule 6 (expr -> FAUX .)
    OU              reduce using rule 6 (expr -> FAUX .)
    ET              reduce using rule 6 (expr -> FAUX .)
    DIFFERENT       reduce using rule 6 (expr -> FAUX .)
    EGAL            reduce using rule 6 (expr -> FAUX .)
    SUPERIEUR_OU_EGAL reduce using rule 6 (expr -> FAUX .)
    INFERIEUR_OU_EGAL reduce using rule 6 (expr -> FAUX .)
    SUPERIEUR       reduce using rule 6 (expr -> FAUX .)
    INFERIEUR       reduce using rule 6 (expr -> FAUX .)
    %               reduce using rule 6 (expr -> FAUX .)
    /               reduce using rule 6 (expr -> FAUX .)
    *               reduce using rule 6 (expr -> FAUX .)
    -               reduce using rule 6 (expr -> FAUX .)
    +               reduce using rule 6 (expr -> FAUX .)


state 11

    (7) expr -> VRAI .
    )               reduce using rule 7 (expr -> VRAI .)
    OU              reduce using rule 7 (expr -> VRAI .)
    ET              reduce using rule 7 (expr -> VRAI .)
    DIFFERENT       reduce using rule 7 (expr -> VRAI .)
    EGAL            reduce using rule 7 (expr -> VRAI .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (expr -> VRAI .)
    INFERIEUR_OU_EGAL reduce using rule 7 (expr -> VRAI .)
    SUPERIEUR       reduce using rule 7 (expr -> VRAI .)
    INFERIEUR       reduce using rule 7 (expr -> VRAI .)
    %               reduce using rule 7 (expr -> VRAI .)
    /               reduce using rule 7 (expr -> VRAI .)
    *               reduce using rule 7 (expr -> VRAI .)
    -               reduce using rule 7 (expr -> VRAI .)
    +               reduce using rule 7 (expr -> VRAI .)


state 12

    (8) expr -> NON . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 29

state 13

    (17) expr -> ENTIER .
    )               reduce using rule 17 (expr -> ENTIER .)
    OU              reduce using rule 17 (expr -> ENTIER .)
    ET              reduce using rule 17 (expr -> ENTIER .)
    DIFFERENT       reduce using rule 17 (expr -> ENTIER .)
    EGAL            reduce using rule 17 (expr -> ENTIER .)
    SUPERIEUR_OU_EGAL reduce using rule 17 (expr -> ENTIER .)
    INFERIEUR_OU_EGAL reduce using rule 17 (expr -> ENTIER .)
    SUPERIEUR       reduce using rule 17 (expr -> ENTIER .)
    INFERIEUR       reduce using rule 17 (expr -> ENTIER .)
    %               reduce using rule 17 (expr -> ENTIER .)
    /               reduce using rule 17 (expr -> ENTIER .)
    *               reduce using rule 17 (expr -> ENTIER .)
    -               reduce using rule 17 (expr -> ENTIER .)
    +               reduce using rule 17 (expr -> ENTIER .)


state 14

    (18) expr -> ( expr . )
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               shift and go to state 30
    OU              shift and go to state 16
    ET              shift and go to state 17
    DIFFERENT       shift and go to state 18
    EGAL            shift and go to state 19
    SUPERIEUR_OU_EGAL shift and go to state 20
    INFERIEUR_OU_EGAL shift and go to state 21
    SUPERIEUR       shift and go to state 22
    INFERIEUR       shift and go to state 23
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 15

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 31


state 16

    (9) expr -> expr OU . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 32

state 17

    (10) expr -> expr ET . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 33

state 18

    (11) expr -> expr DIFFERENT . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 34

state 19

    (12) expr -> expr EGAL . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 35

state 20

    (13) expr -> expr SUPERIEUR_OU_EGAL . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 36

state 21

    (14) expr -> expr INFERIEUR_OU_EGAL . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 37

state 22

    (15) expr -> expr SUPERIEUR . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 38

state 23

    (16) expr -> expr INFERIEUR . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 39

state 24

    (19) expr -> expr % . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 40

state 25

    (20) expr -> expr / . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 41

state 26

    (21) expr -> expr * . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 42

state 27

    (22) expr -> expr - . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 43

state 28

    (23) expr -> expr + . expr
    (6) expr -> . FAUX
    (7) expr -> . VRAI
    (8) expr -> . NON expr
    (9) expr -> . expr OU expr
    (10) expr -> . expr ET expr
    (11) expr -> . expr DIFFERENT expr
    (12) expr -> . expr EGAL expr
    (13) expr -> . expr SUPERIEUR_OU_EGAL expr
    (14) expr -> . expr INFERIEUR_OU_EGAL expr
    (15) expr -> . expr SUPERIEUR expr
    (16) expr -> . expr INFERIEUR expr
    (17) expr -> . ENTIER
    (18) expr -> . ( expr )
    (19) expr -> . expr % expr
    (20) expr -> . expr / expr
    (21) expr -> . expr * expr
    (22) expr -> . expr - expr
    (23) expr -> . expr + expr
    FAUX            shift and go to state 10
    VRAI            shift and go to state 11
    NON             shift and go to state 12
    ENTIER          shift and go to state 13
    (               shift and go to state 8

    expr                           shift and go to state 44

state 29

    (8) expr -> NON expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 8 (expr -> NON expr .)
    OU              reduce using rule 8 (expr -> NON expr .)
    ET              reduce using rule 8 (expr -> NON expr .)
    DIFFERENT       shift and go to state 18
    EGAL            shift and go to state 19
    SUPERIEUR_OU_EGAL shift and go to state 20
    INFERIEUR_OU_EGAL shift and go to state 21
    SUPERIEUR       shift and go to state 22
    INFERIEUR       shift and go to state 23
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 30

    (18) expr -> ( expr ) .
    )               reduce using rule 18 (expr -> ( expr ) .)
    OU              reduce using rule 18 (expr -> ( expr ) .)
    ET              reduce using rule 18 (expr -> ( expr ) .)
    DIFFERENT       reduce using rule 18 (expr -> ( expr ) .)
    EGAL            reduce using rule 18 (expr -> ( expr ) .)
    SUPERIEUR_OU_EGAL reduce using rule 18 (expr -> ( expr ) .)
    INFERIEUR_OU_EGAL reduce using rule 18 (expr -> ( expr ) .)
    SUPERIEUR       reduce using rule 18 (expr -> ( expr ) .)
    INFERIEUR       reduce using rule 18 (expr -> ( expr ) .)
    %               reduce using rule 18 (expr -> ( expr ) .)
    /               reduce using rule 18 (expr -> ( expr ) .)
    *               reduce using rule 18 (expr -> ( expr ) .)
    -               reduce using rule 18 (expr -> ( expr ) .)
    +               reduce using rule 18 (expr -> ( expr ) .)


state 31

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 32

    (9) expr -> expr OU expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 9 (expr -> expr OU expr .)
    OU              reduce using rule 9 (expr -> expr OU expr .)
    ET              reduce using rule 9 (expr -> expr OU expr .)
    DIFFERENT       shift and go to state 18
    EGAL            shift and go to state 19
    SUPERIEUR_OU_EGAL shift and go to state 20
    INFERIEUR_OU_EGAL shift and go to state 21
    SUPERIEUR       shift and go to state 22
    INFERIEUR       shift and go to state 23
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 33

    (10) expr -> expr ET expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 10 (expr -> expr ET expr .)
    OU              reduce using rule 10 (expr -> expr ET expr .)
    ET              reduce using rule 10 (expr -> expr ET expr .)
    DIFFERENT       shift and go to state 18
    EGAL            shift and go to state 19
    SUPERIEUR_OU_EGAL shift and go to state 20
    INFERIEUR_OU_EGAL shift and go to state 21
    SUPERIEUR       shift and go to state 22
    INFERIEUR       shift and go to state 23
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 34

    (11) expr -> expr DIFFERENT expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 11 (expr -> expr DIFFERENT expr .)
    OU              reduce using rule 11 (expr -> expr DIFFERENT expr .)
    ET              reduce using rule 11 (expr -> expr DIFFERENT expr .)
    DIFFERENT       reduce using rule 11 (expr -> expr DIFFERENT expr .)
    EGAL            reduce using rule 11 (expr -> expr DIFFERENT expr .)
    SUPERIEUR_OU_EGAL reduce using rule 11 (expr -> expr DIFFERENT expr .)
    INFERIEUR_OU_EGAL reduce using rule 11 (expr -> expr DIFFERENT expr .)
    SUPERIEUR       reduce using rule 11 (expr -> expr DIFFERENT expr .)
    INFERIEUR       reduce using rule 11 (expr -> expr DIFFERENT expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 35

    (12) expr -> expr EGAL expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 12 (expr -> expr EGAL expr .)
    OU              reduce using rule 12 (expr -> expr EGAL expr .)
    ET              reduce using rule 12 (expr -> expr EGAL expr .)
    DIFFERENT       reduce using rule 12 (expr -> expr EGAL expr .)
    EGAL            reduce using rule 12 (expr -> expr EGAL expr .)
    SUPERIEUR_OU_EGAL reduce using rule 12 (expr -> expr EGAL expr .)
    INFERIEUR_OU_EGAL reduce using rule 12 (expr -> expr EGAL expr .)
    SUPERIEUR       reduce using rule 12 (expr -> expr EGAL expr .)
    INFERIEUR       reduce using rule 12 (expr -> expr EGAL expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 36

    (13) expr -> expr SUPERIEUR_OU_EGAL expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    OU              reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    ET              reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    DIFFERENT       reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    EGAL            reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    SUPERIEUR_OU_EGAL reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    INFERIEUR_OU_EGAL reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    SUPERIEUR       reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    INFERIEUR       reduce using rule 13 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 37

    (14) expr -> expr INFERIEUR_OU_EGAL expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    OU              reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    ET              reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    DIFFERENT       reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    EGAL            reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    SUPERIEUR_OU_EGAL reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    INFERIEUR_OU_EGAL reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    SUPERIEUR       reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    INFERIEUR       reduce using rule 14 (expr -> expr INFERIEUR_OU_EGAL expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 38

    (15) expr -> expr SUPERIEUR expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    OU              reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    ET              reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    DIFFERENT       reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    EGAL            reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    SUPERIEUR_OU_EGAL reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    INFERIEUR_OU_EGAL reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    SUPERIEUR       reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    INFERIEUR       reduce using rule 15 (expr -> expr SUPERIEUR expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 39

    (16) expr -> expr INFERIEUR expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 16 (expr -> expr INFERIEUR expr .)
    OU              reduce using rule 16 (expr -> expr INFERIEUR expr .)
    ET              reduce using rule 16 (expr -> expr INFERIEUR expr .)
    DIFFERENT       reduce using rule 16 (expr -> expr INFERIEUR expr .)
    EGAL            reduce using rule 16 (expr -> expr INFERIEUR expr .)
    SUPERIEUR_OU_EGAL reduce using rule 16 (expr -> expr INFERIEUR expr .)
    INFERIEUR_OU_EGAL reduce using rule 16 (expr -> expr INFERIEUR expr .)
    SUPERIEUR       reduce using rule 16 (expr -> expr INFERIEUR expr .)
    INFERIEUR       reduce using rule 16 (expr -> expr INFERIEUR expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 40

    (19) expr -> expr % expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 19 (expr -> expr % expr .)
    OU              reduce using rule 19 (expr -> expr % expr .)
    ET              reduce using rule 19 (expr -> expr % expr .)
    DIFFERENT       reduce using rule 19 (expr -> expr % expr .)
    EGAL            reduce using rule 19 (expr -> expr % expr .)
    SUPERIEUR_OU_EGAL reduce using rule 19 (expr -> expr % expr .)
    INFERIEUR_OU_EGAL reduce using rule 19 (expr -> expr % expr .)
    SUPERIEUR       reduce using rule 19 (expr -> expr % expr .)
    INFERIEUR       reduce using rule 19 (expr -> expr % expr .)
    %               reduce using rule 19 (expr -> expr % expr .)
    /               reduce using rule 19 (expr -> expr % expr .)
    *               reduce using rule 19 (expr -> expr % expr .)
    -               reduce using rule 19 (expr -> expr % expr .)
    +               reduce using rule 19 (expr -> expr % expr .)


state 41

    (20) expr -> expr / expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 20 (expr -> expr / expr .)
    OU              reduce using rule 20 (expr -> expr / expr .)
    ET              reduce using rule 20 (expr -> expr / expr .)
    DIFFERENT       reduce using rule 20 (expr -> expr / expr .)
    EGAL            reduce using rule 20 (expr -> expr / expr .)
    SUPERIEUR_OU_EGAL reduce using rule 20 (expr -> expr / expr .)
    INFERIEUR_OU_EGAL reduce using rule 20 (expr -> expr / expr .)
    SUPERIEUR       reduce using rule 20 (expr -> expr / expr .)
    INFERIEUR       reduce using rule 20 (expr -> expr / expr .)
    %               reduce using rule 20 (expr -> expr / expr .)
    /               reduce using rule 20 (expr -> expr / expr .)
    *               reduce using rule 20 (expr -> expr / expr .)
    -               reduce using rule 20 (expr -> expr / expr .)
    +               reduce using rule 20 (expr -> expr / expr .)


state 42

    (21) expr -> expr * expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 21 (expr -> expr * expr .)
    OU              reduce using rule 21 (expr -> expr * expr .)
    ET              reduce using rule 21 (expr -> expr * expr .)
    DIFFERENT       reduce using rule 21 (expr -> expr * expr .)
    EGAL            reduce using rule 21 (expr -> expr * expr .)
    SUPERIEUR_OU_EGAL reduce using rule 21 (expr -> expr * expr .)
    INFERIEUR_OU_EGAL reduce using rule 21 (expr -> expr * expr .)
    SUPERIEUR       reduce using rule 21 (expr -> expr * expr .)
    INFERIEUR       reduce using rule 21 (expr -> expr * expr .)
    %               reduce using rule 21 (expr -> expr * expr .)
    /               reduce using rule 21 (expr -> expr * expr .)
    *               reduce using rule 21 (expr -> expr * expr .)
    -               reduce using rule 21 (expr -> expr * expr .)
    +               reduce using rule 21 (expr -> expr * expr .)


state 43

    (22) expr -> expr - expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 22 (expr -> expr - expr .)
    OU              reduce using rule 22 (expr -> expr - expr .)
    ET              reduce using rule 22 (expr -> expr - expr .)
    DIFFERENT       reduce using rule 22 (expr -> expr - expr .)
    EGAL            reduce using rule 22 (expr -> expr - expr .)
    SUPERIEUR_OU_EGAL reduce using rule 22 (expr -> expr - expr .)
    INFERIEUR_OU_EGAL reduce using rule 22 (expr -> expr - expr .)
    SUPERIEUR       reduce using rule 22 (expr -> expr - expr .)
    INFERIEUR       reduce using rule 22 (expr -> expr - expr .)
    -               reduce using rule 22 (expr -> expr - expr .)
    +               reduce using rule 22 (expr -> expr - expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26


state 44

    (23) expr -> expr + expr .
    (9) expr -> expr . OU expr
    (10) expr -> expr . ET expr
    (11) expr -> expr . DIFFERENT expr
    (12) expr -> expr . EGAL expr
    (13) expr -> expr . SUPERIEUR_OU_EGAL expr
    (14) expr -> expr . INFERIEUR_OU_EGAL expr
    (15) expr -> expr . SUPERIEUR expr
    (16) expr -> expr . INFERIEUR expr
    (19) expr -> expr . % expr
    (20) expr -> expr . / expr
    (21) expr -> expr . * expr
    (22) expr -> expr . - expr
    (23) expr -> expr . + expr
    )               reduce using rule 23 (expr -> expr + expr .)
    OU              reduce using rule 23 (expr -> expr + expr .)
    ET              reduce using rule 23 (expr -> expr + expr .)
    DIFFERENT       reduce using rule 23 (expr -> expr + expr .)
    EGAL            reduce using rule 23 (expr -> expr + expr .)
    SUPERIEUR_OU_EGAL reduce using rule 23 (expr -> expr + expr .)
    INFERIEUR_OU_EGAL reduce using rule 23 (expr -> expr + expr .)
    SUPERIEUR       reduce using rule 23 (expr -> expr + expr .)
    INFERIEUR       reduce using rule 23 (expr -> expr + expr .)
    -               reduce using rule 23 (expr -> expr + expr .)
    +               reduce using rule 23 (expr -> expr + expr .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26
