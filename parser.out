Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeSinonsi
Rule 2     prog -> listeInstructions
Rule 3     listeInstructions -> instruction listeInstructions
Rule 4     listeInstructions -> instruction
Rule 5     listeSinonsi -> SINON_SI listeSinonsi
Rule 6     listeSinonsi -> SINON_SI
Rule 7     instruction -> TYPE_ENTIER IDENTIFIANT ;
Rule 8     instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
Rule 9     instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions }
Rule 10    instruction -> SI ( expr ) { listeInstructions } SINON_SI
Rule 11    instruction -> SI ( expr ) { listeInstructions }
Rule 12    instruction -> IDENTIFIANT = LIRE ( ) ;
Rule 13    instruction -> ecrire
Rule 14    ecrire -> ECRIRE ( expr ) ;
Rule 15    expr -> FAUX
Rule 16    expr -> VRAI
Rule 17    expr -> NON expr  [precedence=right, level=2]
Rule 18    expr -> expr OU expr  [precedence=left, level=1]
Rule 19    expr -> expr ET expr  [precedence=left, level=1]
Rule 20    expr -> expr DIFFERENT expr  [precedence=left, level=3]
Rule 21    expr -> expr EGAL expr  [precedence=left, level=3]
Rule 22    expr -> expr SUPERIEUR_OU_EGAL expr  [precedence=left, level=3]
Rule 23    expr -> expr INFERIEUR_OU_EGAL expr  [precedence=left, level=3]
Rule 24    expr -> expr SUPERIEUR expr  [precedence=left, level=3]
Rule 25    expr -> expr INFERIEUR expr  [precedence=left, level=3]
Rule 26    expr -> ENTIER
Rule 27    expr -> ( expr )  [precedence=left, level=6]
Rule 28    expr -> expr % expr  [precedence=left, level=5]
Rule 29    expr -> expr / expr  [precedence=left, level=5]
Rule 30    expr -> expr * expr  [precedence=left, level=5]
Rule 31    expr -> expr - expr  [precedence=left, level=4]
Rule 32    expr -> expr + expr  [precedence=left, level=4]

Unused terminals:

    ==
    PARENTHESE_OUVRANTE
    POINT_VIRGULE
    ,
    !=
    PARENTHESE_FERMANTE
    >=
    <
    <=
    TANT_QUE
    >
    ACCOLADE_OUVRANTE
    VIRGULE
    ACCOLADE_FERMANTE
    TYPE_BOOLEEN
    RETOURNER

Terminals, with rules where they appear:

!=                   : 
%                    : 28
(                    : 8 9 10 11 12 14 27
)                    : 8 9 10 11 12 14 27
*                    : 30
+                    : 32
,                    : 
-                    : 31
/                    : 29
;                    : 7 12 14
<                    : 
<=                   : 
=                    : 12
==                   : 
>                    : 
>=                   : 
ACCOLADE_FERMANTE    : 
ACCOLADE_OUVRANTE    : 
DIFFERENT            : 20
ECRIRE               : 14
EGAL                 : 21
ENTIER               : 26
ET                   : 19
FAUX                 : 15
IDENTIFIANT          : 7 12
INFERIEUR            : 25
INFERIEUR_OU_EGAL    : 23
LIRE                 : 12
NON                  : 17
OU                   : 18
PARENTHESE_FERMANTE  : 
PARENTHESE_OUVRANTE  : 
POINT_VIRGULE        : 
RETOURNER            : 
SI                   : 8 9 10 11
SINON                : 8 9
SINON_SI             : 5 6 8 10
SUPERIEUR            : 24
SUPERIEUR_OU_EGAL    : 22
TANT_QUE             : 
TYPE_BOOLEEN         : 
TYPE_ENTIER          : 7
VIRGULE              : 
VRAI                 : 16
error                : 
{                    : 8 8 9 9 10 11
}                    : 8 8 9 9 10 11

Nonterminals, with rules where they appear:

ecrire               : 13
expr                 : 8 9 10 11 14 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 27 28 28 29 29 30 30 31 31 32 32
instruction          : 3 4
listeInstructions    : 2 3 8 8 9 9 10 11
listeSinonsi         : 1 5
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeSinonsi
    (2) prog -> . listeInstructions
    (5) listeSinonsi -> . SINON_SI listeSinonsi
    (6) listeSinonsi -> . SINON_SI
    (3) listeInstructions -> . instruction listeInstructions
    (4) listeInstructions -> . instruction
    (7) instruction -> . TYPE_ENTIER IDENTIFIANT ;
    (8) instruction -> . SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> . SI ( expr ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> . SI ( expr ) { listeInstructions } SINON_SI
    (11) instruction -> . SI ( expr ) { listeInstructions }
    (12) instruction -> . IDENTIFIANT = LIRE ( ) ;
    (13) instruction -> . ecrire
    (14) ecrire -> . ECRIRE ( expr ) ;
    SINON_SI        shift and go to state 4
    TYPE_ENTIER     shift and go to state 6
    SI              shift and go to state 8
    IDENTIFIANT     shift and go to state 7
    ECRIRE          shift and go to state 10

    prog                           shift and go to state 1
    listeSinonsi                   shift and go to state 2
    listeInstructions              shift and go to state 3
    instruction                    shift and go to state 5
    ecrire                         shift and go to state 9

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeSinonsi .
    $end            reduce using rule 1 (prog -> listeSinonsi .)


state 3

    (2) prog -> listeInstructions .
    $end            reduce using rule 2 (prog -> listeInstructions .)


state 4

    (5) listeSinonsi -> SINON_SI . listeSinonsi
    (6) listeSinonsi -> SINON_SI .
    (5) listeSinonsi -> . SINON_SI listeSinonsi
    (6) listeSinonsi -> . SINON_SI
    $end            reduce using rule 6 (listeSinonsi -> SINON_SI .)
    SINON_SI        shift and go to state 4

    listeSinonsi                   shift and go to state 11

state 5

    (3) listeInstructions -> instruction . listeInstructions
    (4) listeInstructions -> instruction .
    (3) listeInstructions -> . instruction listeInstructions
    (4) listeInstructions -> . instruction
    (7) instruction -> . TYPE_ENTIER IDENTIFIANT ;
    (8) instruction -> . SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> . SI ( expr ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> . SI ( expr ) { listeInstructions } SINON_SI
    (11) instruction -> . SI ( expr ) { listeInstructions }
    (12) instruction -> . IDENTIFIANT = LIRE ( ) ;
    (13) instruction -> . ecrire
    (14) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 4 (listeInstructions -> instruction .)
    }               reduce using rule 4 (listeInstructions -> instruction .)
    TYPE_ENTIER     shift and go to state 6
    SI              shift and go to state 8
    IDENTIFIANT     shift and go to state 7
    ECRIRE          shift and go to state 10

    instruction                    shift and go to state 5
    listeInstructions              shift and go to state 12
    ecrire                         shift and go to state 9

state 6

    (7) instruction -> TYPE_ENTIER . IDENTIFIANT ;
    IDENTIFIANT     shift and go to state 13


state 7

    (12) instruction -> IDENTIFIANT . = LIRE ( ) ;
    =               shift and go to state 14


state 8

    (8) instruction -> SI . ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> SI . ( expr ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> SI . ( expr ) { listeInstructions } SINON_SI
    (11) instruction -> SI . ( expr ) { listeInstructions }
    (               shift and go to state 15


state 9

    (13) instruction -> ecrire .
    TYPE_ENTIER     reduce using rule 13 (instruction -> ecrire .)
    SI              reduce using rule 13 (instruction -> ecrire .)
    IDENTIFIANT     reduce using rule 13 (instruction -> ecrire .)
    ECRIRE          reduce using rule 13 (instruction -> ecrire .)
    $end            reduce using rule 13 (instruction -> ecrire .)
    }               reduce using rule 13 (instruction -> ecrire .)


state 10

    (14) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 16


state 11

    (5) listeSinonsi -> SINON_SI listeSinonsi .
    $end            reduce using rule 5 (listeSinonsi -> SINON_SI listeSinonsi .)


state 12

    (3) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 3 (listeInstructions -> instruction listeInstructions .)
    }               reduce using rule 3 (listeInstructions -> instruction listeInstructions .)


state 13

    (7) instruction -> TYPE_ENTIER IDENTIFIANT . ;
    ;               shift and go to state 17


state 14

    (12) instruction -> IDENTIFIANT = . LIRE ( ) ;
    LIRE            shift and go to state 18


state 15

    (8) instruction -> SI ( . expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> SI ( . expr ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> SI ( . expr ) { listeInstructions } SINON_SI
    (11) instruction -> SI ( . expr ) { listeInstructions }
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 20

state 16

    (14) ecrire -> ECRIRE ( . expr ) ;
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 25

state 17

    (7) instruction -> TYPE_ENTIER IDENTIFIANT ; .
    TYPE_ENTIER     reduce using rule 7 (instruction -> TYPE_ENTIER IDENTIFIANT ; .)
    SI              reduce using rule 7 (instruction -> TYPE_ENTIER IDENTIFIANT ; .)
    IDENTIFIANT     reduce using rule 7 (instruction -> TYPE_ENTIER IDENTIFIANT ; .)
    ECRIRE          reduce using rule 7 (instruction -> TYPE_ENTIER IDENTIFIANT ; .)
    $end            reduce using rule 7 (instruction -> TYPE_ENTIER IDENTIFIANT ; .)
    }               reduce using rule 7 (instruction -> TYPE_ENTIER IDENTIFIANT ; .)


state 18

    (12) instruction -> IDENTIFIANT = LIRE . ( ) ;
    (               shift and go to state 26


state 19

    (27) expr -> ( . expr )
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 27

state 20

    (8) instruction -> SI ( expr . ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> SI ( expr . ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> SI ( expr . ) { listeInstructions } SINON_SI
    (11) instruction -> SI ( expr . ) { listeInstructions }
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               shift and go to state 28
    OU              shift and go to state 29
    ET              shift and go to state 30
    DIFFERENT       shift and go to state 31
    EGAL            shift and go to state 32
    SUPERIEUR_OU_EGAL shift and go to state 33
    INFERIEUR_OU_EGAL shift and go to state 34
    SUPERIEUR       shift and go to state 35
    INFERIEUR       shift and go to state 36
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 21

    (15) expr -> FAUX .
    )               reduce using rule 15 (expr -> FAUX .)
    OU              reduce using rule 15 (expr -> FAUX .)
    ET              reduce using rule 15 (expr -> FAUX .)
    DIFFERENT       reduce using rule 15 (expr -> FAUX .)
    EGAL            reduce using rule 15 (expr -> FAUX .)
    SUPERIEUR_OU_EGAL reduce using rule 15 (expr -> FAUX .)
    INFERIEUR_OU_EGAL reduce using rule 15 (expr -> FAUX .)
    SUPERIEUR       reduce using rule 15 (expr -> FAUX .)
    INFERIEUR       reduce using rule 15 (expr -> FAUX .)
    %               reduce using rule 15 (expr -> FAUX .)
    /               reduce using rule 15 (expr -> FAUX .)
    *               reduce using rule 15 (expr -> FAUX .)
    -               reduce using rule 15 (expr -> FAUX .)
    +               reduce using rule 15 (expr -> FAUX .)


state 22

    (16) expr -> VRAI .
    )               reduce using rule 16 (expr -> VRAI .)
    OU              reduce using rule 16 (expr -> VRAI .)
    ET              reduce using rule 16 (expr -> VRAI .)
    DIFFERENT       reduce using rule 16 (expr -> VRAI .)
    EGAL            reduce using rule 16 (expr -> VRAI .)
    SUPERIEUR_OU_EGAL reduce using rule 16 (expr -> VRAI .)
    INFERIEUR_OU_EGAL reduce using rule 16 (expr -> VRAI .)
    SUPERIEUR       reduce using rule 16 (expr -> VRAI .)
    INFERIEUR       reduce using rule 16 (expr -> VRAI .)
    %               reduce using rule 16 (expr -> VRAI .)
    /               reduce using rule 16 (expr -> VRAI .)
    *               reduce using rule 16 (expr -> VRAI .)
    -               reduce using rule 16 (expr -> VRAI .)
    +               reduce using rule 16 (expr -> VRAI .)


state 23

    (17) expr -> NON . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 42

state 24

    (26) expr -> ENTIER .
    )               reduce using rule 26 (expr -> ENTIER .)
    OU              reduce using rule 26 (expr -> ENTIER .)
    ET              reduce using rule 26 (expr -> ENTIER .)
    DIFFERENT       reduce using rule 26 (expr -> ENTIER .)
    EGAL            reduce using rule 26 (expr -> ENTIER .)
    SUPERIEUR_OU_EGAL reduce using rule 26 (expr -> ENTIER .)
    INFERIEUR_OU_EGAL reduce using rule 26 (expr -> ENTIER .)
    SUPERIEUR       reduce using rule 26 (expr -> ENTIER .)
    INFERIEUR       reduce using rule 26 (expr -> ENTIER .)
    %               reduce using rule 26 (expr -> ENTIER .)
    /               reduce using rule 26 (expr -> ENTIER .)
    *               reduce using rule 26 (expr -> ENTIER .)
    -               reduce using rule 26 (expr -> ENTIER .)
    +               reduce using rule 26 (expr -> ENTIER .)


state 25

    (14) ecrire -> ECRIRE ( expr . ) ;
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               shift and go to state 43
    OU              shift and go to state 29
    ET              shift and go to state 30
    DIFFERENT       shift and go to state 31
    EGAL            shift and go to state 32
    SUPERIEUR_OU_EGAL shift and go to state 33
    INFERIEUR_OU_EGAL shift and go to state 34
    SUPERIEUR       shift and go to state 35
    INFERIEUR       shift and go to state 36
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 26

    (12) instruction -> IDENTIFIANT = LIRE ( . ) ;
    )               shift and go to state 44


state 27

    (27) expr -> ( expr . )
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               shift and go to state 45
    OU              shift and go to state 29
    ET              shift and go to state 30
    DIFFERENT       shift and go to state 31
    EGAL            shift and go to state 32
    SUPERIEUR_OU_EGAL shift and go to state 33
    INFERIEUR_OU_EGAL shift and go to state 34
    SUPERIEUR       shift and go to state 35
    INFERIEUR       shift and go to state 36
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 28

    (8) instruction -> SI ( expr ) . { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> SI ( expr ) . { listeInstructions } SINON { listeInstructions }
    (10) instruction -> SI ( expr ) . { listeInstructions } SINON_SI
    (11) instruction -> SI ( expr ) . { listeInstructions }
    {               shift and go to state 46


state 29

    (18) expr -> expr OU . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 47

state 30

    (19) expr -> expr ET . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 48

state 31

    (20) expr -> expr DIFFERENT . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 49

state 32

    (21) expr -> expr EGAL . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 50

state 33

    (22) expr -> expr SUPERIEUR_OU_EGAL . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 51

state 34

    (23) expr -> expr INFERIEUR_OU_EGAL . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 52

state 35

    (24) expr -> expr SUPERIEUR . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 53

state 36

    (25) expr -> expr INFERIEUR . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 54

state 37

    (28) expr -> expr % . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 55

state 38

    (29) expr -> expr / . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 56

state 39

    (30) expr -> expr * . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 57

state 40

    (31) expr -> expr - . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 58

state 41

    (32) expr -> expr + . expr
    (15) expr -> . FAUX
    (16) expr -> . VRAI
    (17) expr -> . NON expr
    (18) expr -> . expr OU expr
    (19) expr -> . expr ET expr
    (20) expr -> . expr DIFFERENT expr
    (21) expr -> . expr EGAL expr
    (22) expr -> . expr SUPERIEUR_OU_EGAL expr
    (23) expr -> . expr INFERIEUR_OU_EGAL expr
    (24) expr -> . expr SUPERIEUR expr
    (25) expr -> . expr INFERIEUR expr
    (26) expr -> . ENTIER
    (27) expr -> . ( expr )
    (28) expr -> . expr % expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    FAUX            shift and go to state 21
    VRAI            shift and go to state 22
    NON             shift and go to state 23
    ENTIER          shift and go to state 24
    (               shift and go to state 19

    expr                           shift and go to state 59

state 42

    (17) expr -> NON expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 17 (expr -> NON expr .)
    OU              reduce using rule 17 (expr -> NON expr .)
    ET              reduce using rule 17 (expr -> NON expr .)
    DIFFERENT       shift and go to state 31
    EGAL            shift and go to state 32
    SUPERIEUR_OU_EGAL shift and go to state 33
    INFERIEUR_OU_EGAL shift and go to state 34
    SUPERIEUR       shift and go to state 35
    INFERIEUR       shift and go to state 36
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 43

    (14) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 60


state 44

    (12) instruction -> IDENTIFIANT = LIRE ( ) . ;
    ;               shift and go to state 61


state 45

    (27) expr -> ( expr ) .
    )               reduce using rule 27 (expr -> ( expr ) .)
    OU              reduce using rule 27 (expr -> ( expr ) .)
    ET              reduce using rule 27 (expr -> ( expr ) .)
    DIFFERENT       reduce using rule 27 (expr -> ( expr ) .)
    EGAL            reduce using rule 27 (expr -> ( expr ) .)
    SUPERIEUR_OU_EGAL reduce using rule 27 (expr -> ( expr ) .)
    INFERIEUR_OU_EGAL reduce using rule 27 (expr -> ( expr ) .)
    SUPERIEUR       reduce using rule 27 (expr -> ( expr ) .)
    INFERIEUR       reduce using rule 27 (expr -> ( expr ) .)
    %               reduce using rule 27 (expr -> ( expr ) .)
    /               reduce using rule 27 (expr -> ( expr ) .)
    *               reduce using rule 27 (expr -> ( expr ) .)
    -               reduce using rule 27 (expr -> ( expr ) .)
    +               reduce using rule 27 (expr -> ( expr ) .)


state 46

    (8) instruction -> SI ( expr ) { . listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> SI ( expr ) { . listeInstructions } SINON { listeInstructions }
    (10) instruction -> SI ( expr ) { . listeInstructions } SINON_SI
    (11) instruction -> SI ( expr ) { . listeInstructions }
    (3) listeInstructions -> . instruction listeInstructions
    (4) listeInstructions -> . instruction
    (7) instruction -> . TYPE_ENTIER IDENTIFIANT ;
    (8) instruction -> . SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> . SI ( expr ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> . SI ( expr ) { listeInstructions } SINON_SI
    (11) instruction -> . SI ( expr ) { listeInstructions }
    (12) instruction -> . IDENTIFIANT = LIRE ( ) ;
    (13) instruction -> . ecrire
    (14) ecrire -> . ECRIRE ( expr ) ;
    TYPE_ENTIER     shift and go to state 6
    SI              shift and go to state 8
    IDENTIFIANT     shift and go to state 7
    ECRIRE          shift and go to state 10

    listeInstructions              shift and go to state 62
    instruction                    shift and go to state 5
    ecrire                         shift and go to state 9

state 47

    (18) expr -> expr OU expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 18 (expr -> expr OU expr .)
    OU              reduce using rule 18 (expr -> expr OU expr .)
    ET              reduce using rule 18 (expr -> expr OU expr .)
    DIFFERENT       shift and go to state 31
    EGAL            shift and go to state 32
    SUPERIEUR_OU_EGAL shift and go to state 33
    INFERIEUR_OU_EGAL shift and go to state 34
    SUPERIEUR       shift and go to state 35
    INFERIEUR       shift and go to state 36
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 48

    (19) expr -> expr ET expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 19 (expr -> expr ET expr .)
    OU              reduce using rule 19 (expr -> expr ET expr .)
    ET              reduce using rule 19 (expr -> expr ET expr .)
    DIFFERENT       shift and go to state 31
    EGAL            shift and go to state 32
    SUPERIEUR_OU_EGAL shift and go to state 33
    INFERIEUR_OU_EGAL shift and go to state 34
    SUPERIEUR       shift and go to state 35
    INFERIEUR       shift and go to state 36
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 49

    (20) expr -> expr DIFFERENT expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 20 (expr -> expr DIFFERENT expr .)
    OU              reduce using rule 20 (expr -> expr DIFFERENT expr .)
    ET              reduce using rule 20 (expr -> expr DIFFERENT expr .)
    DIFFERENT       reduce using rule 20 (expr -> expr DIFFERENT expr .)
    EGAL            reduce using rule 20 (expr -> expr DIFFERENT expr .)
    SUPERIEUR_OU_EGAL reduce using rule 20 (expr -> expr DIFFERENT expr .)
    INFERIEUR_OU_EGAL reduce using rule 20 (expr -> expr DIFFERENT expr .)
    SUPERIEUR       reduce using rule 20 (expr -> expr DIFFERENT expr .)
    INFERIEUR       reduce using rule 20 (expr -> expr DIFFERENT expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 50

    (21) expr -> expr EGAL expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 21 (expr -> expr EGAL expr .)
    OU              reduce using rule 21 (expr -> expr EGAL expr .)
    ET              reduce using rule 21 (expr -> expr EGAL expr .)
    DIFFERENT       reduce using rule 21 (expr -> expr EGAL expr .)
    EGAL            reduce using rule 21 (expr -> expr EGAL expr .)
    SUPERIEUR_OU_EGAL reduce using rule 21 (expr -> expr EGAL expr .)
    INFERIEUR_OU_EGAL reduce using rule 21 (expr -> expr EGAL expr .)
    SUPERIEUR       reduce using rule 21 (expr -> expr EGAL expr .)
    INFERIEUR       reduce using rule 21 (expr -> expr EGAL expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 51

    (22) expr -> expr SUPERIEUR_OU_EGAL expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    OU              reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    ET              reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    DIFFERENT       reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    EGAL            reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    SUPERIEUR_OU_EGAL reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    INFERIEUR_OU_EGAL reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    SUPERIEUR       reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    INFERIEUR       reduce using rule 22 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 52

    (23) expr -> expr INFERIEUR_OU_EGAL expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    OU              reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    ET              reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    DIFFERENT       reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    EGAL            reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    SUPERIEUR_OU_EGAL reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    INFERIEUR_OU_EGAL reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    SUPERIEUR       reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    INFERIEUR       reduce using rule 23 (expr -> expr INFERIEUR_OU_EGAL expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 53

    (24) expr -> expr SUPERIEUR expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    OU              reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    ET              reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    DIFFERENT       reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    EGAL            reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    SUPERIEUR_OU_EGAL reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    INFERIEUR_OU_EGAL reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    SUPERIEUR       reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    INFERIEUR       reduce using rule 24 (expr -> expr SUPERIEUR expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 54

    (25) expr -> expr INFERIEUR expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 25 (expr -> expr INFERIEUR expr .)
    OU              reduce using rule 25 (expr -> expr INFERIEUR expr .)
    ET              reduce using rule 25 (expr -> expr INFERIEUR expr .)
    DIFFERENT       reduce using rule 25 (expr -> expr INFERIEUR expr .)
    EGAL            reduce using rule 25 (expr -> expr INFERIEUR expr .)
    SUPERIEUR_OU_EGAL reduce using rule 25 (expr -> expr INFERIEUR expr .)
    INFERIEUR_OU_EGAL reduce using rule 25 (expr -> expr INFERIEUR expr .)
    SUPERIEUR       reduce using rule 25 (expr -> expr INFERIEUR expr .)
    INFERIEUR       reduce using rule 25 (expr -> expr INFERIEUR expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39
    -               shift and go to state 40
    +               shift and go to state 41


state 55

    (28) expr -> expr % expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 28 (expr -> expr % expr .)
    OU              reduce using rule 28 (expr -> expr % expr .)
    ET              reduce using rule 28 (expr -> expr % expr .)
    DIFFERENT       reduce using rule 28 (expr -> expr % expr .)
    EGAL            reduce using rule 28 (expr -> expr % expr .)
    SUPERIEUR_OU_EGAL reduce using rule 28 (expr -> expr % expr .)
    INFERIEUR_OU_EGAL reduce using rule 28 (expr -> expr % expr .)
    SUPERIEUR       reduce using rule 28 (expr -> expr % expr .)
    INFERIEUR       reduce using rule 28 (expr -> expr % expr .)
    %               reduce using rule 28 (expr -> expr % expr .)
    /               reduce using rule 28 (expr -> expr % expr .)
    *               reduce using rule 28 (expr -> expr % expr .)
    -               reduce using rule 28 (expr -> expr % expr .)
    +               reduce using rule 28 (expr -> expr % expr .)


state 56

    (29) expr -> expr / expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 29 (expr -> expr / expr .)
    OU              reduce using rule 29 (expr -> expr / expr .)
    ET              reduce using rule 29 (expr -> expr / expr .)
    DIFFERENT       reduce using rule 29 (expr -> expr / expr .)
    EGAL            reduce using rule 29 (expr -> expr / expr .)
    SUPERIEUR_OU_EGAL reduce using rule 29 (expr -> expr / expr .)
    INFERIEUR_OU_EGAL reduce using rule 29 (expr -> expr / expr .)
    SUPERIEUR       reduce using rule 29 (expr -> expr / expr .)
    INFERIEUR       reduce using rule 29 (expr -> expr / expr .)
    %               reduce using rule 29 (expr -> expr / expr .)
    /               reduce using rule 29 (expr -> expr / expr .)
    *               reduce using rule 29 (expr -> expr / expr .)
    -               reduce using rule 29 (expr -> expr / expr .)
    +               reduce using rule 29 (expr -> expr / expr .)


state 57

    (30) expr -> expr * expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 30 (expr -> expr * expr .)
    OU              reduce using rule 30 (expr -> expr * expr .)
    ET              reduce using rule 30 (expr -> expr * expr .)
    DIFFERENT       reduce using rule 30 (expr -> expr * expr .)
    EGAL            reduce using rule 30 (expr -> expr * expr .)
    SUPERIEUR_OU_EGAL reduce using rule 30 (expr -> expr * expr .)
    INFERIEUR_OU_EGAL reduce using rule 30 (expr -> expr * expr .)
    SUPERIEUR       reduce using rule 30 (expr -> expr * expr .)
    INFERIEUR       reduce using rule 30 (expr -> expr * expr .)
    %               reduce using rule 30 (expr -> expr * expr .)
    /               reduce using rule 30 (expr -> expr * expr .)
    *               reduce using rule 30 (expr -> expr * expr .)
    -               reduce using rule 30 (expr -> expr * expr .)
    +               reduce using rule 30 (expr -> expr * expr .)


state 58

    (31) expr -> expr - expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 31 (expr -> expr - expr .)
    OU              reduce using rule 31 (expr -> expr - expr .)
    ET              reduce using rule 31 (expr -> expr - expr .)
    DIFFERENT       reduce using rule 31 (expr -> expr - expr .)
    EGAL            reduce using rule 31 (expr -> expr - expr .)
    SUPERIEUR_OU_EGAL reduce using rule 31 (expr -> expr - expr .)
    INFERIEUR_OU_EGAL reduce using rule 31 (expr -> expr - expr .)
    SUPERIEUR       reduce using rule 31 (expr -> expr - expr .)
    INFERIEUR       reduce using rule 31 (expr -> expr - expr .)
    -               reduce using rule 31 (expr -> expr - expr .)
    +               reduce using rule 31 (expr -> expr - expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39


state 59

    (32) expr -> expr + expr .
    (18) expr -> expr . OU expr
    (19) expr -> expr . ET expr
    (20) expr -> expr . DIFFERENT expr
    (21) expr -> expr . EGAL expr
    (22) expr -> expr . SUPERIEUR_OU_EGAL expr
    (23) expr -> expr . INFERIEUR_OU_EGAL expr
    (24) expr -> expr . SUPERIEUR expr
    (25) expr -> expr . INFERIEUR expr
    (28) expr -> expr . % expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               reduce using rule 32 (expr -> expr + expr .)
    OU              reduce using rule 32 (expr -> expr + expr .)
    ET              reduce using rule 32 (expr -> expr + expr .)
    DIFFERENT       reduce using rule 32 (expr -> expr + expr .)
    EGAL            reduce using rule 32 (expr -> expr + expr .)
    SUPERIEUR_OU_EGAL reduce using rule 32 (expr -> expr + expr .)
    INFERIEUR_OU_EGAL reduce using rule 32 (expr -> expr + expr .)
    SUPERIEUR       reduce using rule 32 (expr -> expr + expr .)
    INFERIEUR       reduce using rule 32 (expr -> expr + expr .)
    -               reduce using rule 32 (expr -> expr + expr .)
    +               reduce using rule 32 (expr -> expr + expr .)
    %               shift and go to state 37
    /               shift and go to state 38
    *               shift and go to state 39


state 60

    (14) ecrire -> ECRIRE ( expr ) ; .
    TYPE_ENTIER     reduce using rule 14 (ecrire -> ECRIRE ( expr ) ; .)
    SI              reduce using rule 14 (ecrire -> ECRIRE ( expr ) ; .)
    IDENTIFIANT     reduce using rule 14 (ecrire -> ECRIRE ( expr ) ; .)
    ECRIRE          reduce using rule 14 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 14 (ecrire -> ECRIRE ( expr ) ; .)
    }               reduce using rule 14 (ecrire -> ECRIRE ( expr ) ; .)


state 61

    (12) instruction -> IDENTIFIANT = LIRE ( ) ; .
    TYPE_ENTIER     reduce using rule 12 (instruction -> IDENTIFIANT = LIRE ( ) ; .)
    SI              reduce using rule 12 (instruction -> IDENTIFIANT = LIRE ( ) ; .)
    IDENTIFIANT     reduce using rule 12 (instruction -> IDENTIFIANT = LIRE ( ) ; .)
    ECRIRE          reduce using rule 12 (instruction -> IDENTIFIANT = LIRE ( ) ; .)
    $end            reduce using rule 12 (instruction -> IDENTIFIANT = LIRE ( ) ; .)
    }               reduce using rule 12 (instruction -> IDENTIFIANT = LIRE ( ) ; .)


state 62

    (8) instruction -> SI ( expr ) { listeInstructions . } SINON_SI SINON { listeInstructions }
    (9) instruction -> SI ( expr ) { listeInstructions . } SINON { listeInstructions }
    (10) instruction -> SI ( expr ) { listeInstructions . } SINON_SI
    (11) instruction -> SI ( expr ) { listeInstructions . }
    }               shift and go to state 63


state 63

    (8) instruction -> SI ( expr ) { listeInstructions } . SINON_SI SINON { listeInstructions }
    (9) instruction -> SI ( expr ) { listeInstructions } . SINON { listeInstructions }
    (10) instruction -> SI ( expr ) { listeInstructions } . SINON_SI
    (11) instruction -> SI ( expr ) { listeInstructions } .
    SINON_SI        shift and go to state 64
    SINON           shift and go to state 65
    TYPE_ENTIER     reduce using rule 11 (instruction -> SI ( expr ) { listeInstructions } .)
    SI              reduce using rule 11 (instruction -> SI ( expr ) { listeInstructions } .)
    IDENTIFIANT     reduce using rule 11 (instruction -> SI ( expr ) { listeInstructions } .)
    ECRIRE          reduce using rule 11 (instruction -> SI ( expr ) { listeInstructions } .)
    $end            reduce using rule 11 (instruction -> SI ( expr ) { listeInstructions } .)
    }               reduce using rule 11 (instruction -> SI ( expr ) { listeInstructions } .)


state 64

    (8) instruction -> SI ( expr ) { listeInstructions } SINON_SI . SINON { listeInstructions }
    (10) instruction -> SI ( expr ) { listeInstructions } SINON_SI .
    SINON           shift and go to state 66
    TYPE_ENTIER     reduce using rule 10 (instruction -> SI ( expr ) { listeInstructions } SINON_SI .)
    SI              reduce using rule 10 (instruction -> SI ( expr ) { listeInstructions } SINON_SI .)
    IDENTIFIANT     reduce using rule 10 (instruction -> SI ( expr ) { listeInstructions } SINON_SI .)
    ECRIRE          reduce using rule 10 (instruction -> SI ( expr ) { listeInstructions } SINON_SI .)
    $end            reduce using rule 10 (instruction -> SI ( expr ) { listeInstructions } SINON_SI .)
    }               reduce using rule 10 (instruction -> SI ( expr ) { listeInstructions } SINON_SI .)


state 65

    (9) instruction -> SI ( expr ) { listeInstructions } SINON . { listeInstructions }
    {               shift and go to state 67


state 66

    (8) instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON . { listeInstructions }
    {               shift and go to state 68


state 67

    (9) instruction -> SI ( expr ) { listeInstructions } SINON { . listeInstructions }
    (3) listeInstructions -> . instruction listeInstructions
    (4) listeInstructions -> . instruction
    (7) instruction -> . TYPE_ENTIER IDENTIFIANT ;
    (8) instruction -> . SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> . SI ( expr ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> . SI ( expr ) { listeInstructions } SINON_SI
    (11) instruction -> . SI ( expr ) { listeInstructions }
    (12) instruction -> . IDENTIFIANT = LIRE ( ) ;
    (13) instruction -> . ecrire
    (14) ecrire -> . ECRIRE ( expr ) ;
    TYPE_ENTIER     shift and go to state 6
    SI              shift and go to state 8
    IDENTIFIANT     shift and go to state 7
    ECRIRE          shift and go to state 10

    listeInstructions              shift and go to state 69
    instruction                    shift and go to state 5
    ecrire                         shift and go to state 9

state 68

    (8) instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { . listeInstructions }
    (3) listeInstructions -> . instruction listeInstructions
    (4) listeInstructions -> . instruction
    (7) instruction -> . TYPE_ENTIER IDENTIFIANT ;
    (8) instruction -> . SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions }
    (9) instruction -> . SI ( expr ) { listeInstructions } SINON { listeInstructions }
    (10) instruction -> . SI ( expr ) { listeInstructions } SINON_SI
    (11) instruction -> . SI ( expr ) { listeInstructions }
    (12) instruction -> . IDENTIFIANT = LIRE ( ) ;
    (13) instruction -> . ecrire
    (14) ecrire -> . ECRIRE ( expr ) ;
    TYPE_ENTIER     shift and go to state 6
    SI              shift and go to state 8
    IDENTIFIANT     shift and go to state 7
    ECRIRE          shift and go to state 10

    listeInstructions              shift and go to state 70
    instruction                    shift and go to state 5
    ecrire                         shift and go to state 9

state 69

    (9) instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions . }
    }               shift and go to state 71


state 70

    (8) instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions . }
    }               shift and go to state 72


state 71

    (9) instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions } .
    TYPE_ENTIER     reduce using rule 9 (instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions } .)
    SI              reduce using rule 9 (instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions } .)
    IDENTIFIANT     reduce using rule 9 (instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions } .)
    ECRIRE          reduce using rule 9 (instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions } .)
    $end            reduce using rule 9 (instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions } .)
    }               reduce using rule 9 (instruction -> SI ( expr ) { listeInstructions } SINON { listeInstructions } .)


state 72

    (8) instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions } .
    TYPE_ENTIER     reduce using rule 8 (instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions } .)
    SI              reduce using rule 8 (instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions } .)
    IDENTIFIANT     reduce using rule 8 (instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions } .)
    ECRIRE          reduce using rule 8 (instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions } .)
    $end            reduce using rule 8 (instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions } .)
    }               reduce using rule 8 (instruction -> SI ( expr ) { listeInstructions } SINON_SI SINON { listeInstructions } .)
